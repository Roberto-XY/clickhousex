$ clickhouse-client --param_parName="[1, 2]"  -q "SELECT * FROM table WHERE a = {parName:Array(UInt16)}"
clickhouse_cmd = """
clickhouse-client --host localhost --port 9000 --query="SHOW TABLES FORMAT TabSeparatedWithNamesAndTypes"
"""
System.cmd("sh", ["-c", clickhouse_cmd])

clickhouse_cmd = """
clickhouse-client --host localhost --port 9000 --time --query="SELECT * FROM sales_tes LIMIT 2 FORMAT RowBinaryWithNamesAndTypes"
"""
{res, 0} = System.cmd("sh", ["-c", clickhouse_cmd])



clickhouse_cmd = """
clickhouse-client --host localhost --port 9000 --time --query="SELECT 1.34, [1, NULL,3,toNullable(5)], toNullable(toLowCardinality(5)), (toNullable(toLowCardinality(5)), '채채', 4), 1 = 2, toFixedString('h', 1) FORMAT RowBinaryWithNamesAndTypes"
"""
{res, 0} = System.cmd("sh", ["-c", clickhouse_cmd])
Clickhousex.Codec.RowBinary.decode(res) 


clickhouse_cmd = """
clickhouse-client --host localhost --port 9000 --time --query="DESCRIBE TABLE(SELECT 1.34, [1, NULL,3,toNullable(5)], toNullable(toLowCardinality(5)), (toNullable(toLowCardinality(5)), '채채', 4), 1 = 2, toFixedString('h', 1)) FORMAT RowBinaryWithNamesAndTypes"
"""
{res, 0} = System.cmd("sh", ["-c", clickhouse_cmd])
Clickhousex.Codec.RowBinary.decode(res) 


clickhouse_cmd = """
clickhouse-client --host localhost --time --query="SELECT toNullable(toLowCardinality(5)) FORMAT RowBinaryWithNamesAndTypes"
"""
{res, 0} = System.cmd("sh", ["-c", clickhouse_cmd])
Clickhousex.Codec.RowBinary.decode(res) 

import Clickhousex.Protocol

{:ok, socket} = connect()

hello(socket)

:ok = :gen_tcp.close(socket)

Clickhousex.Codec.Binary.decode_varint(<<10, 67, 108, 105,  99, 107, 72, 111, 117, 115, 101>>)
Clickhousex.Codec.Binary.encode_varint(19)
